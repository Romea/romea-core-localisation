#ifndef romea_ParticleUpdaterGPS_hpp
#define romea_ParticleUpdaterGPS_hpp

//romea
#include <time/Time.hpp>
#include <particle/ParticleFilterUpdater.hpp>
#include <particle/resampling/ParticleFilterResampling.hpp>
#include <math/NormalRandomMatrixGenerator.hpp>
#include "../R2WLevelArmCompensation.hpp"
#include "../../ObservationGPS.hpp"
#include "../../LocalisationFSMState.hpp"
#include "R2WParticleState.hpp"


namespace romea {


class R2WParticleUpdaterGPS : public ParticleFilterUpdater<R2WParticleLocalisationState,ObservationGPS,LocalisationFSMState,ParticleFilterResampling<double>,Duration>
{

public :

  using Array2X =Eigen::Array<double,2,Eigen::Dynamic,Eigen::RowMajor>;
  using Array1X = Eigen::Array<double, 1,Eigen::Dynamic, Eigen::RowMajor>;

public :

  R2WParticleUpdaterGPS(const std::string &name,
                        const size_t & numberOfParticles,
                        const bool & disableUpdateFunction);

  virtual void update(const Duration & duration,
                      const ObservationGPS & currentObservation,
                      LocalisationFSMState & currentFSMState,
                      R2WParticleLocalisationState & currentState)override;

private :

  virtual bool update_(const Duration & duration,
                       const ObservationGPS & currentObservation,
                       R2WParticleLocalisationState & currentState);

  virtual bool set_(const Duration & duration,
                    const ObservationGPS & currentObservation,
                    R2WParticleLocalisationState & currentState);

  void computeLevelArms_(ObservationGPS const & ObservationPosition,
                         R2WParticleLocalisationState & currentState);

  void setParticlePositions_(ObservationGPS const & ObservationPosition,
                             R2WParticleLocalisationState & currentState);

  void applyLevelArmCompentations_(R2WParticleLocalisationState & currentState);

protected :

  LevelArmCompensation levelArmCompensation_;
  Array2X levelArms_;
  Array1X cosCourses_;
  Array1X sinCourses_;
  Array1X squaredDistances_;

};

}

#endif
